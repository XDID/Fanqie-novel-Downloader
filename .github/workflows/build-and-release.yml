name: 构建与发布

on:
  release:
    types: [created]
  workflow_dispatch:  # 允许手动触发工作流
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: '是否为预发布版本'
        required: true
        type: boolean
        default: false

# 添加必要的权限
permissions:
  contents: write  # 允许写入仓库内容，需要这个来创建release
  packages: read

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 确保cookie.json存在
        run: |
          if (-not (Test-Path -Path "./cookie.json")) {
            '""' | Out-File -FilePath "./cookie.json" -Encoding utf8
          }

      - name: 确保library.json存在
        run: |
          if (-not (Test-Path -Path "./library.json")) {
            '{}' | Out-File -FilePath "./library.json" -Encoding utf8
          }

      - name: 创建assets目录
        run: |
          if (-not (Test-Path -Path "./assets")) {
            New-Item -Path "./assets" -ItemType Directory
          }

      # 移除了 "准备构建脚本" 步骤

      - name: 构建Windows可执行文件
        run: |
          # build_exe.py 内部已处理 assets，移除这里的重复添加
          python build_exe.py --add-data="cookie.json;." --add-data="library.json;."

      - name: 压缩Windows可执行文件
        run: |
          Compress-Archive -Path dist/FanqieNovelDownloader.exe -DestinationPath Fanqie-Novel-Downloader-Windows.zip

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: Fanqie-Novel-Downloader-Windows.zip

      - name: 上传至已存在的Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: Fanqie-Novel-Downloader-Windows.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  # 为MacOS构建
  build-macos:
    runs-on: macos-13
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 确保cookie.json存在
        run: |
          if [ ! -f "./cookie.json" ]; then
            echo '""' > "./cookie.json"
          fi

      - name: 确保library.json存在
        run: |
          if [ ! -f "./library.json" ]; then
            echo '{}' > "./library.json"
          fi

      - name: 创建assets目录
        run: |
          mkdir -p ./assets

      # 移除了 "准备构建脚本" 步骤

      - name: 构建MacOS可执行文件
        run: |
          # build_exe.py 内部已处理 assets，移除这里的重复添加
          python build_exe.py --add-data="cookie.json:." --add-data="library.json:."

      - name: 压缩MacOS可执行文件
        run: |
          # 创建App Bundle结构 (如果PyInstaller没有自动创建)
          mkdir -p dist/FanqieNovelDownloader.app/Contents/Resources
          # 将可执行文件移动到正确位置
          mv dist/FanqieNovelDownloader dist/FanqieNovelDownloader.app/Contents/MacOS/
          # (如果需要Info.plist等，也应在此处处理或由PyInstaller处理)
          # 压缩 .app 目录
          cd dist && zip -ry ../Fanqie-Novel-Downloader-MacOS.zip FanqieNovelDownloader.app

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: Fanqie-Novel-Downloader-MacOS.zip

      - name: 上传至已存在的Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: Fanqie-Novel-Downloader-MacOS.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  # 为Linux构建
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 确保cookie.json存在
        run: |
          if [ ! -f "./cookie.json" ]; then
            echo '""' > "./cookie.json"
          fi

      - name: 确保library.json存在
        run: |
          if [ ! -f "./library.json" ]; then
            echo '{}' > "./library.json"
          fi

      - name: 创建assets目录
        run: |
          mkdir -p ./assets

      # 移除了 "准备构建脚本" 步骤

      - name: 构建Linux可执行文件
        run: |
          # build_exe.py 内部已处理 assets，移除这里的重复添加
          python build_exe.py --add-data="cookie.json:." --add-data="library.json:."

      - name: 压缩Linux可执行文件
        run: |
          cd dist && zip -r ../Fanqie-Novel-Downloader-Linux.zip FanqieNovelDownloader

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: Fanqie-Novel-Downloader-Linux.zip

      - name: 上传至已存在的Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: Fanqie-Novel-Downloader-Linux.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  # 创建发布版本
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 20 # 获取最近20次提交

      - name: 获取最近提交历史
        id: git_log
        run: |
          # 获取最近10次提交并格式化
          COMMIT_LOG=$(git log -n 10 --pretty=format:"- %s (%h)" --no-merges)
          # 将提交日志保存到多行环境变量中
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 下载Windows构建产物
        uses: actions/download-artifact@v4
        with:
          name: windows-build

      - name: 下载MacOS构建产物
        uses: actions/download-artifact@v4
        with:
          name: macos-build

      - name: 下载Linux构建产物
        uses: actions/download-artifact@v4
        with:
          name: linux-build

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.event.inputs.version }}
          name: 番茄小说下载器 ${{ github.event.inputs.version }}
          body: |
            # 番茄小说下载器 ${{ github.event.inputs.version }} 发布

            ### 功能
            - 从番茄小说下载小说并导出为TXT格式
            - 支持多线程下载加速
            - 内置阅读器，支持章节导航和阅读进度保存
            - 支持本地书库管理
            - 支持自定义阅读器字体、颜色和主题

            ### 近期更新内容
            ${{ env.COMMIT_LOG }}

            ### 下载
            - Windows: Fanqie-Novel-Downloader-Windows.zip
            - macOS: Fanqie-Novel-Downloader-MacOS.zip
            - Linux: Fanqie-Novel-Downloader-Linux.zip
          files: |
            Fanqie-Novel-Downloader-Windows.zip
            Fanqie-Novel-Downloader-MacOS.zip
            Fanqie-Novel-Downloader-Linux.zip
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
